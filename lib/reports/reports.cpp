#include "reports.h"
#include "../gemini/promts.h"

DynamicJsonDocument lastDailyReport(8192);

int dailyReportHour = 23;
int dailyReportMinute = 0;
bool reportSentToday = false;

String lastReportResults = "";
bool reportInProgress = false;
unsigned long reportStartTime = 0;

String lastAnalysisResults = "";
bool analysisInProgress = false;
unsigned long analysisStartTime = 0;

bool isTimeToSendDailyReport() {
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Kh√¥ng th·ªÉ l·∫•y th·ªùi gian");
    return false;
  }
  
  if (timeinfo.tm_hour == dailyReportHour && 
      timeinfo.tm_min == dailyReportMinute && 
      !reportSentToday) {
    return true;
  }
  
  if (timeinfo.tm_hour == 0 && timeinfo.tm_min == 0) {
    reportSentToday = false;
  }
  
  return false;
}

void saveDailyReport(JsonObject summary) {
    lastDailyReport.clear();
    lastDailyReport.set(summary);   
}

String buildDailyReportMessage(const JsonObject& summary, const char* dateStr) {
    float avgTemp = summary["avgTemp"];
    float maxTemp = summary["maxTemp"];
    float minTemp = summary["minTemp"];
    float avgHumidity = summary["avgHumidity"];
    float avgSoilMoisture = summary["avgSoilMoisture"];
    float maxSoilMoisture = summary["maxSoilMoisture"];
    float minSoilMoisture = summary["minSoilMoisture"];
    int readings = summary["readings"];

    String message = "üìä *B√ÅO C√ÅO H√ÄNG NG√ÄY* üìä\n\n";
    message += "üìÖ *Ng√†y*: " + String(dateStr) + "\n";
    message += "üî¢ *S·ªë ƒëo*: " + String(readings) + " l·∫ßn\n\n";
    message += "üå°Ô∏è *Nhi·ªát ƒë·ªô*:\n";
    message += "  ‚Ä¢ Trung b√¨nh: " + String(avgTemp, 1) + " ¬∞C\n";
    message += "  ‚Ä¢ Cao nh·∫•t: " + String(maxTemp, 1) + " ¬∞C\n";
    message += "  ‚Ä¢ Th·∫•p nh·∫•t: " + String(minTemp, 1) + " ¬∞C\n\n";
    message += "üíß *ƒê·ªô ·∫©m kh√¥ng kh√≠ trung b√¨nh*: " + String(avgHumidity, 1) + " %\n\n";
    message += "üå± *ƒê·ªô ·∫©m ƒë·∫•t*:\n";
    message += "  ‚Ä¢ Trung b√¨nh: " + String(avgSoilMoisture, 1) + " %\n";
    message += "  ‚Ä¢ Cao nh·∫•t: " + String(maxSoilMoisture, 1) + " %\n";
    message += "  ‚Ä¢ Th·∫•p nh·∫•t: " + String(minSoilMoisture, 1) + " %\n\n";
    // Ph√¢n t√≠ch ƒë∆°n gi·∫£n
    message += "üìù *PH√ÇN T√çCH*:\n";
    if (avgTemp > 30) {
        message += "‚ö†Ô∏è Nhi·ªát ƒë·ªô trung b√¨nh cao, c·∫ßn ch√∫ √Ω t∆∞·ªõi n∆∞·ªõc cho c√¢y\n";
    } else if (avgTemp < 18) {
        message += "‚ö†Ô∏è Nhi·ªát ƒë·ªô trung b√¨nh th·∫•p, c·∫ßn ch√∫ √Ω gi·ªØ ·∫•m cho c√¢y\n";
    } else {
        message += "‚úÖ Nhi·ªát ƒë·ªô trung b√¨nh ph√π h·ª£p cho c√¢y ph√°t tri·ªÉn\n";
    }
    if (avgHumidity > 80) {
        message += "‚ö†Ô∏è ƒê·ªô ·∫©m kh√¥ng kh√≠ cao, c√≥ th·ªÉ d·∫´n ƒë·∫øn n·∫•m b·ªánh\n";
    } else if (avgHumidity < 40) {
        message += "‚ö†Ô∏è ƒê·ªô ·∫©m kh√¥ng kh√≠ th·∫•p, c·∫ßn tƒÉng c∆∞·ªùng t∆∞·ªõi n∆∞·ªõc\n";
    } else {
        message += "‚úÖ ƒê·ªô ·∫©m kh√¥ng kh√≠ ph√π h·ª£p cho c√¢y ph√°t tri·ªÉn\n";
    }
    if (avgSoilMoisture > 80) {
        message += "‚ö†Ô∏è ƒê·ªô ·∫©m ƒë·∫•t cao, c·∫ßn gi·∫£m t∆∞·ªõi n∆∞·ªõc ƒë·ªÉ tr√°nh √∫ng\n";
    } else if (avgSoilMoisture < 30) {
        message += "‚ö†Ô∏è ƒê·ªô ·∫©m ƒë·∫•t th·∫•p, c·∫ßn tƒÉng c∆∞·ªùng t∆∞·ªõi n∆∞·ªõc\n";
    } else {
        message += "‚úÖ ƒê·ªô ·∫©m ƒë·∫•t ph√π h·ª£p cho r·ªÖ c√¢y ph√°t tri·ªÉn\n";
    }
    message += "\nüìé ƒê∆∞·ªùng d·∫´n ƒë·∫øn b√°o c√°o ƒë·∫ßy ƒë·ªß:\nhttps://docs.google.com/spreadsheets/d/1TL3eZKGvPJPkzvwfWgkRNlIFvacSC1WcySUlwyRMPnA/edit";
    message += "\n\nüí° ƒê·ªÉ xem ph√¢n t√≠ch chi ti·∫øt, g·ª≠i l·ªánh /analysis";
    return message;
}

void sendDailyReport() {
    Serial.println("ƒêang t·∫°o b√°o c√°o h√†ng ng√†y...");
    reportInProgress = true;
    reportStartTime = millis();
    struct tm timeinfo;
    if(!getLocalTime(&timeinfo)){
        Serial.println("Kh√¥ng th·ªÉ l·∫•y th·ªùi gian");
        reportInProgress = false;
        lastReportResults = "‚ùå Error: Could not get current time.";
        return;
    }
    char dateStr[11];
    strftime(dateStr, sizeof(dateStr), "%Y-%m-%d", &timeinfo);
    String urlFinal = "https://script.google.com/macros/s/"+String(GOOGLE_SCRIPT_ID)+"/exec?";
    urlFinal += "action=getDailyReport";
    urlFinal += "&date=" + String(dateStr);
    Serial.print("G·ª≠i y√™u c·∫ßu l·∫•y b√°o c√°o: ");
    Serial.println(urlFinal);
    WiFiClientSecure client;
    client.setInsecure();
    HTTPClient http;
    http.begin(client, urlFinal);
    http.setFollowRedirects(HTTPC_STRICT_FOLLOW_REDIRECTS);
    http.setTimeout(15000);
    int httpCode = http.GET();
    if (httpCode > 0) {
        String payload = http.getString();
        Serial.println("Ph·∫£n h·ªìi HTTP code: " + String(httpCode));
        Serial.println("N·ªôi dung ph·∫£n h·ªìi: " + payload);
        if (payload.startsWith("{")) {
            DynamicJsonDocument doc(8192);
            DeserializationError error = deserializeJson(doc, payload);
            if (!error) {
                if (doc.containsKey("summary")) {
                    String message = buildDailyReportMessage(doc["summary"], dateStr);
                    lastReportResults = message;
                    reportInProgress = false;
                    sendToAllChannels(message);
                    reportSentToday = true;
                    Serial.println("ƒê√£ g·ª≠i b√°o c√°o h√†ng ng√†y th√†nh c√¥ng");
                    saveDailyReport(doc["summary"]);
                } else if (doc.containsKey("error")) {
                    String errorMsg = doc["error"].as<String>();
                    String message = "‚ùå *KH√îNG C√ì D·ªÆ LI·ªÜU B√ÅO C√ÅO* ‚ùå\n\n";
                    message += errorMsg;
                    lastReportResults = message;
                    reportInProgress = false;
                    sendToAllChannels(message);
                    Serial.println("L·ªói t·ª´ Google Script: " + errorMsg);
                } else {
                    String message = "‚ùå *KH√îNG C√ì D·ªÆ LI·ªÜU B√ÅO C√ÅO* ‚ùå\n\n";
                    message += "Kh√¥ng c√≥ d·ªØ li·ªáu cho ng√†y " + String(dateStr);
                    lastReportResults = message;
                    reportInProgress = false;
                    sendToAllChannels(message);
                    Serial.println("Kh√¥ng c√≥ d·ªØ li·ªáu cho b√°o c√°o h√†ng ng√†y");
                }
            } else {
                Serial.println("L·ªói ph√¢n t√≠ch JSON: " + String(error.c_str()));
                Serial.println("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c: " + payload);
                lastReportResults = "‚ùå L·ªói ph√¢n t√≠ch d·ªØ li·ªáu b√°o c√°o!";
                reportInProgress = false;
                sendToAllChannels("‚ùå L·ªói ph√¢n t√≠ch d·ªØ li·ªáu b√°o c√°o!", "");
            }
        } else {
            Serial.println("Ph·∫£n h·ªìi kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá: " + payload);
            lastReportResults = "‚ùå L·ªói: Ph·∫£n h·ªìi t·ª´ m√°y ch·ªß kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON!";
            reportInProgress = false;
            sendToAllChannels("‚ùå L·ªói: Ph·∫£n h·ªìi t·ª´ m√°y ch·ªß kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JSON!", "");
        }
    } else {
        Serial.println("L·ªói k·∫øt n·ªëi HTTP, code: " + String(httpCode));
        lastReportResults = "‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn Google Sheets ƒë·ªÉ l·∫•y b√°o c√°o! Code: " + String(httpCode);
        reportInProgress = false;
        sendToAllChannels("‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn Google Sheets ƒë·ªÉ l·∫•y b√°o c√°o! Code: " + String(httpCode), "");
    }
    http.end();
}

void requestDetailedAnalysis() {
  if (lastDailyReport.size() > 0) {
    analysisInProgress = true;
    analysisStartTime = millis();
    lastAnalysisResults = "";
    
    JsonObject summary = lastDailyReport.as<JsonObject>();
    sendDetailedReportToGemini(summary);
  } else {
    lastAnalysisResults = "‚ùå No recent report data available for analysis.";
    sendToAllChannels("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu b√°o c√°o g·∫ßn ƒë√¢y ƒë·ªÉ ph√¢n t√≠ch!", "Markdown");
  }
}
